var localStream, localPeerConnection, remotePeerConnection;

var localVideo = document.getElementById("localVideo");
var remoteVideo = document.getElementById("remoteVideo");

var startButton = document.getElementById("startButton");
var callButton = document.getElementById("callButton");
var hangupButton = document.getElementById("hangupButton");
$(()=>{
  $('#callButton').prop('disabled',true);
  $('#startButton').prop('disabled',false);
  $('#hangupButton').prop('disabled',true);
  $('#startButton').click(()=>{
    start();
  })
  $('#startButton').click(()=>{
    call();
  })
})

function trace(text) {
  console.log((performance.now() / 1000).toFixed(3) + ": " + text);
}

function gotStream(stream){
  trace("Received local stream");
  localStream = stream;
  var video = document.getElementById('localVideo');
  video.srcObject = stream;
  video.onloadedmetadata = function(e) {
   video.play();
  };
  $('#callButton').prop('disabled',false);
}

function gotRemoteSteam(event){
  remoteVideo.src = URL.createObjectURL(event.stream);
  trace("Received remote stream");
}

function start() {
  trace("Requesting local stream");
  $('#startButton').prop('disabled',true);
  navigator.getUserMedia = navigator.getUserMedia ||
                  navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
  navigator.getUserMedia({audio:false, video:true}, gotStream,
    function(error) {
      trace("navigator.getUserMedia error: ", error);
    });
}

function call() {
  $('#callButton').prop('disabled',true);
  $('#hangupButton').prop('disabled',false);
  trace("Starting call");
  console.log(localStream);
  // console.log("b: "+localStream.getVideoTracks);
  // console.log("c: "+localStream.getAudioTracks);
  // if (localStream.getVideoTracks.length > 0) {
  //   trace('Using video device: ' + localStream.getVideoTracks()[0].label);
  // }
  // if (localStream.getAudioTracks.length > 0) {
  //   trace('Using audio device: ' + localStream.getAudioTracks()[0].label);
  // }

  var servers = null;

  localPeerConnection = new webkitRTCPeerConnection(servers);
  trace("Created local peer connection object localPeerConnection");
  localPeerConnection.onicecandidate = gotLocalIceCandidate;

  remotePeerConnection = new webkitRTCPeerConnection(servers);
  trace("Created remote peer connection object remotePeerConnection");
  remotePeerConnection.onicecandidate = gotRemoteIceCandidate;
  remotePeerConnection.onaddstream = gotRemoteStream;

  localPeerConnection.addStream(localStream);
  trace("Added localStream to localPeerConnection");
  localPeerConnection.createOffer(gotLocalDescription);
}
